{"version":3,"sources":["store/loading.ts","helpers/api.ts","store/userPosts.tsx","store/userId.tsx","store/postId.tsx","store/postIdCheck.tsx","store/visibleComments.tsx","store/addPost.tsx","store/addComment.tsx","store/nameOfComment.tsx","store/emailOfComment.tsx","store/bodyOfComment.tsx","store/inputChange.tsx","helpers/comments.tsx","store/index.ts","components/Start.tsx","components/PostsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","helpers/users.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","POSTS_URL","fetchUserPosts","userId","a","posts","fetch","then","promise","json","result","data","filter","post","setUserPosts","userPosts","id","postId","chooseUserId","choosePostId","setPostIdCheck","postIdCheck","visibleComments","newPost","addComment","newComment","setCommentName","commentName","setCommentEmail","commentEmail","setCommentBody","commentBody","inputChange","COMMENTS_URL","getPostComments","comments","console","log","comment","removePostComment","commentId","method","addPostComment","headers","body","JSON","stringify","rootReducer","combineReducers","loadingReducer","userPostsReducer","userIdReducer","postIdCheckReducer","postIdReducer","visibleCommentsReducer","newPostReducer","newCommentReducer","commentNameReducer","commentEmailReducer","commentBodyReducer","inputChangeReducer","isLoading","state","getUserId","getPostId","getpostIdCheck","getvisibleComments","getNewPost","getNewComment","getNameOfComment","getEmailOfComment","getBodyOfComment","getPosts","title","toLowerCase","includes","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","dispatch","useDispatch","useSelector","selectedUserId","onClick","paramsOfData","disabled","PostsList","handleClick","postIsOpened","activePostId","wrapper","f","delay","timer","event","persist","target","value","sortByInput","clearTimeout","setTimeout","debounce","className","name","placeholder","onChange","map","key","NewCommentForm","email","onSubmit","preventDefault","commentsUpdate","PostDetails","changeVisibleOfComments","length","removeComment","arrayOfSelectUsers","App","selectedPostId","user","index","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89b954a5.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return false;\n\n    case FINISH_LOADING:\n      return true;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","const POSTS_URL = 'https://mate-api.herokuapp.com/posts';\n\nexport const fetchUserPosts = async(userId: number) => {\n  const posts = fetch(`${POSTS_URL}`)\n    .then(promise => promise.json())\n    .then(result => (userId\n      ? result.data.filter((post: any) => post.userId === userId)\n      : result.data));\n\n  return posts;\n};\n\nexport const fetchPostDetails = (postId: number) => {\n  const posts = fetch(`${POSTS_URL}/${postId}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return posts;\n};\n\nexport const deletePost = (postId: number) => {\n  const posts = fetch(`${POSTS_URL}`)\n    .then(promise => promise.json())\n    .then(result => result.data.filter((post: any) => post.id !== postId));\n\n  return posts;\n};\n","import { AnyAction } from 'redux';\nimport { Posts } from '../helpers/interfaces';\n\nconst USER_POSTS = 'USER_POSTS';\nconst REMOVE_POST = 'REMOVE_POST';\n\nexport const setUserPosts = (userPosts: Posts[]) => ({ type: USER_POSTS, userPosts });\nexport const removePost = (postId: number) => ({ type: REMOVE_POST, postId});\n\nconst reducer = (userPosts = [], action: AnyAction) => {\n  switch (action.type) {\n    case USER_POSTS:\n      return action.userPosts;\n    case REMOVE_POST:\n      return userPosts.filter((post: any) => post.id !== action.postId);\n\n    default:\n      return userPosts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst CHOOSE_USER_ID = 'CHOOSE_USER_ID';\n\nexport const chooseUserId = (userId: number) => ({ type: CHOOSE_USER_ID, userId});\n\nconst reducer = (userId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case CHOOSE_USER_ID:\n      return action.userId;\n\n    default:\n      return userId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst CHOOSE_POST_ID = 'CHOOSE_POST_ID';\n\nexport const choosePostId = (postId: number) => ({ type: CHOOSE_POST_ID, postId});\n\nconst reducer = (postId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case CHOOSE_POST_ID:\n      return action.postId;\n\n    default:\n      return postId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst POST_ID_CHECK = 'POST_ID_CHECK';\n\nexport const setPostIdCheck = (postIdCheck: boolean) => ({ type: POST_ID_CHECK, postIdCheck });\n\nconst reducer = (postIdCheck = false, action: AnyAction) => {\n  switch (action.type) {\n    case POST_ID_CHECK:\n      return action.postIdCheck;\n\n    default:\n      return postIdCheck;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst VISIBLE_COMMENTS = 'VISIBLE_COMMENTS';\n\nexport const changeVisibleOfComments = (visibleComments: boolean) => ({ type: VISIBLE_COMMENTS, visibleComments});\n\nconst reducer = (visibleComments = true, action: AnyAction) => {\n  switch (action.type) {\n    case VISIBLE_COMMENTS:\n      return action.visibleComments;\n\n    default:\n      return visibleComments;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { Posts } from '../helpers/interfaces';\n\nconst ADD_POST = 'ADD_POST';\n\nexport const addPost = (newPost: Posts) => ({ type: ADD_POST, newPost});\n\nconst reducer = (newPost = null, action: AnyAction) => {\n  switch (action.type) {\n    case ADD_POST:\n      return action.newPost;\n\n    default:\n      return newPost;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst ADD_COMMENT = 'ADD_COMMENT';\n\nexport const addComment = (newComment: {}) => ({ type: ADD_COMMENT, newComment});\n\nconst reducer = (newComment = {}, action: AnyAction) => {\n  switch (action.type) {\n    case ADD_COMMENT:\n      return action.newComment;\n\n    default:\n      return newComment;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst COMMENT_NAME = 'COMMENT_NAME';\n\nexport const setCommentName = (commentName: string) => ({ type: COMMENT_NAME, commentName});\n\nconst reducer = (commentName = '', action: AnyAction) => {\n  switch (action.type) {\n    case COMMENT_NAME:\n      return action.commentName;\n    default:\n      return commentName;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst COMMENT_EMAIL = 'COMMENT_EMAIL';\n\nexport const setCommentEmail = (commentEmail: string) => ({ type: COMMENT_EMAIL, commentEmail});\n\nconst reducer = (commentEmail = '', action: AnyAction) => {\n  switch (action.type) {\n    case COMMENT_EMAIL:\n      return action.commentEmail;\n    default:\n      return commentEmail;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst COMMENT_BODY = 'COMMENT_BODY';\n\nexport const setCommentBody = (commentBody: string) => ({ type: COMMENT_BODY, commentBody});\n\nconst reducer = (commentBody = '', action: AnyAction) => {\n  switch (action.type) {\n    case COMMENT_BODY:\n      return action.commentBody;\n    default:\n      return commentBody;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst INPUT_CHANGE = 'INPUT_CHANGE';\n\nexport const sortByInput = (inputChange: string) => ({ type: INPUT_CHANGE, inputChange});\n\nconst reducer = (inputChange = '', action: AnyAction) => {\n  switch (action.type) {\n    case INPUT_CHANGE:\n      return action.inputChange;\n\n    default:\n      return inputChange;\n  }\n};\n\nexport default reducer;\n","import { Comments } from \"./interfaces\";\n\nconst COMMENTS_URL = 'https://mate-api.herokuapp.com/comments';\n\nexport const getPostComments = async(postId: number) => {\n  const comments = await fetch(`${COMMENTS_URL}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\nconsole.log(comments)\n  return comments.filter((comment: Comments) => comment.postId === postId);\n};\n\nexport const removePostComment = async (commentId: number) => {\n  const comments = await fetch(`${COMMENTS_URL}/${commentId}`, { method: 'DELETE' })\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments;\n};\n\nexport const addPostComment = async (newComment:any) => {\n  const comments = await fetch(`${COMMENTS_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  })\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments;\n};\n","import { createStore, combineReducers, applyMiddleware, Dispatch } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport { fetchPostDetails, fetchUserPosts } from '../helpers/api';\nimport userPostsReducer, { setUserPosts } from './userPosts';\nimport userIdReducer, { chooseUserId } from './userId';\nimport postIdReducer from './postId';\nimport postIdCheckReducer from './postIdCheck';\nimport visibleCommentsReducer from './visibleComments';\nimport newPostReducer, { addPost } from './addPost';\nimport newCommentReducer, { addComment } from './addComment';\nimport commentNameReducer from './nameOfComment';\nimport commentEmailReducer from './emailOfComment';\nimport commentBodyReducer from './bodyOfComment';\nimport inputChangeReducer from './inputChange';\nimport { addPostComment, getPostComments, removePostComment } from '../helpers/comments';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  userPosts: userPostsReducer,\n  userId: userIdReducer,\n  postIdCheck: postIdCheckReducer,\n  postId: postIdReducer,\n  visibleComments: visibleCommentsReducer,\n  newPost: newPostReducer,\n  newComment: newCommentReducer,\n  commentName: commentNameReducer,\n  commentEmail: commentEmailReducer,\n  commentBody: commentBodyReducer,\n  inputChange: inputChangeReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getUserPosts = (state: RootState) => state.userPosts;\nexport const getUserId = (state: RootState) => state.userId;\nexport const getPostId = (state: RootState) => state.postId;\nexport const getpostIdCheck = (state: RootState) => state.postIdCheck;\nexport const getvisibleComments = (state: RootState) => state.visibleComments;\nexport const getNewPost = (state: RootState) => state.newPost;\nexport const getNewComment = (state: RootState) => state.newComment;\nexport const getNameOfComment = (state: RootState) => state.commentName;\nexport const getEmailOfComment = (state: RootState) => state.commentEmail;\nexport const getBodyOfComment = (state: RootState) => state.commentBody;\nexport const getInputChange = (state: RootState) => state.inputChange;\n\nexport const getPosts = (state: RootState) => {\n  if (!state.userId) {\n    return [...state.userPosts].filter(post => post.title !== null && post.title.toLowerCase()\n    .includes(state.inputChange.toLowerCase()))\n  } else {\n    return [...state.userPosts].filter(post => post.userId !== null && post.userId === state.userId && post.title.toLowerCase()\n    .includes(state.inputChange.toLowerCase()));\n  }\n};\n\nexport const fetchPosts = (paramsOfData: number) => {\n  return async(dispatch: Dispatch<any>) => { \n    dispatch(startLoading());\n\n    const posts = await fetchUserPosts(paramsOfData);\n    dispatch(setUserPosts(posts));\n    dispatch(chooseUserId(paramsOfData));\n    dispatch(finishLoading());\n\n  }\n}\n\nexport const fetchDetailsOfPost = (paramsOfData: number) => {\n  return async(dispatch: Dispatch<any>) => { \n    const posts = await fetchPostDetails(paramsOfData);\n    dispatch(addPost(posts));\n    const comment = await getPostComments(paramsOfData);\n    dispatch(addComment(comment));\n  }\n}\n\n\nexport const removeComment = (commentId: number, postId: number) => {\n  return async (dispatch: Dispatch<any>) => {\n    removePostComment(commentId)\n    .then(() => getPostComments(postId))\n    .then(result => dispatch(addComment(result)));\n  }\n}\n\nexport const commentsUpdate = (newComment: {}, postId: number) => {\n  return async (dispatch: Dispatch<any>) => {\n    addPostComment(newComment)\n    .then(() => getPostComments(postId))\n    .then(result => dispatch(addComment(result)));\n  }\n}\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isLoading, fetchPosts, getUserId } from '../store';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const selectedUserId = useSelector(getUserId);\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => dispatch(fetchPosts(selectedUserId))}\n      disabled={loading}\n    >\n      {!loading && 'Start loading Posts'}\n    </button>\n  );\n};\n","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Posts } from '../helpers/interfaces';\nimport { sortByInput } from '../store/inputChange';\nimport { removePost } from '../store/userPosts';\n\nimport './PostsList.scss';\n\ntype PostsListProps = {\n  handleClick: Function;\n  postIsOpened: boolean;\n  activePostId: number\n  posts: Posts[];\n};\n\nexport const PostsList: React.FC<PostsListProps> = ({posts, handleClick, postIsOpened, activePostId}) => {\n  const dispatch = useDispatch();\n\n  function debounce(f: any, delay: any) {\n    let timer: any;\n\n    return (event: any) => {\n      event.persist();\n      console.log(event);\n      console.log(event.target.value);\n\n      const action = sortByInput(event.target.value);\n      clearTimeout(timer); \n      timer = setTimeout( () => {\n        f(action);\n      }, delay)\n    }\n  }\n  \n  let wrapper = debounce(dispatch, 1500);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <div className=\"App__input\">\n        <label className=\"filterByTitle\">\n          <input\n            className=\"filterByTitle\"\n            type=\"text\"\n            name=\"filterTitle\"\n            placeholder=\"put name of todo\"\n            onChange={wrapper}\n          />\n          <span className=\"bar\" />\n        </label>\n\n      </div>\n    <div className=\"App__PostList\">\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]`}</b>\n              {post.title}\n            </div>\n            <button\n              className=\"beautiful.button\"\n                type=\"button\"\n                onClick={() => dispatch(removePost(post.id))}\n              >\n                Remove\n              </button>\n            {postIsOpened && post.id === activePostId\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleClick(post.id, 'Close')}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleClick(post.id, 'Open')}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n  )\n}\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { commentsUpdate, getBodyOfComment, getEmailOfComment, getNameOfComment } from '../store';\nimport { setCommentBody } from '../store/bodyOfComment';\nimport { setCommentEmail } from '../store/emailOfComment';\nimport { setCommentName } from '../store/nameOfComment';\n\nimport './NewCommentForm.scss';\n\ntype NewCommentFormProps = {\n  postId: number\n};\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = ({ postId }) => {\n  const dispatch = useDispatch();\n\n  const name = useSelector(getNameOfComment);\n  const email = useSelector(getEmailOfComment);\n  const body = useSelector(getBodyOfComment);\n\n  console.log(name)\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n\n    dispatch(commentsUpdate({\n      postId,\n      name,\n      email,\n      body,\n    }, postId));\n\n    dispatch(setCommentName(''));\n    dispatch(setCommentEmail(''));\n    dispatch(setCommentBody(''));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => dispatch(setCommentName(event.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => dispatch(setCommentEmail(event.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => dispatch(setCommentBody(event.target.value))}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Comments } from '../helpers/interfaces';\nimport { getNewComment, getNewPost, getvisibleComments, removeComment } from '../store';\nimport { changeVisibleOfComments } from '../store/visibleComments';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport './PostDetails.scss';\n\ntype PostDetailsProps = {\n  postId: number\n};\n\nexport const PostDetails: React.FC<PostDetailsProps> = ({ postId }) => {\n  const dispatch = useDispatch();\n\n  const visibleComments = useSelector(getvisibleComments);\n  const post = useSelector(getNewPost);\n  const comments = useSelector(getNewComment);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post !== null && post.title}</p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => dispatch(changeVisibleOfComments(!visibleComments))}\n        >\n          {visibleComments ? `Hide` : 'Show'}\n          {` ${comments.length} comments`}\n        </button>\n\n        {visibleComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.length > 0 && comments.map((comment: Comments) => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => dispatch(removeComment(comment.id, postId))}\n                >\n                  X\n                </button>\n                <p>{comment.name}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","export const arrayOfSelectUsers = [\n    'All users',\n    'Leanne Graham',\n    'Ervin Howell',\n    'Clementine Bauch',\n    'Patricia Lebsack',\n    'Chelsey Dietrich',\n    'Mrs. Dennis Schulist',\n    'Kurtis Weissnat',\n    'Nicholas Runolfsdottir V',\n    'Glenna Reichert',\n    'Leanne Graham', \n]\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Start } from './components/Start';\nimport { PostsList } from './components/PostsList';\nimport {\n  isLoading,\n  getPostId,\n  getpostIdCheck,\n  fetchDetailsOfPost,\n  getPosts,\n} from './store';\nimport { choosePostId } from './store/postId';\nimport { setPostIdCheck} from './store/postIdCheck';\nimport { PostDetails } from './components/PostDetails';\nimport { chooseUserId } from './store/userId';\nimport { arrayOfSelectUsers } from './helpers/users';\n\nimport './App.scss';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const posts = useSelector(getPosts);\n  const selectedPostId = useSelector(getPostId);\n  const postIdCheck = useSelector(getpostIdCheck);\n\n  const handleClick = (postId: number, action: any) => {\n    dispatch(fetchDetailsOfPost(postId));\n\n    switch (action) {\n      case 'Open':\n        dispatch(choosePostId(postId));\n        dispatch(setPostIdCheck(true));\n        break;\n      case 'Close':\n        dispatch(choosePostId(0));\n        dispatch(setPostIdCheck(false));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      {!loading\n        ? <Start />\n        : (\n          <div className=\"App__loadPosts\">\n            <header className=\"App__header\">\n              <label>\n                Select a user: &nbsp;\n                <select\n                  className=\"App__user-selector\"\n                  onChange={event => dispatch(chooseUserId(+event.target.value))}\n                >\n                  {arrayOfSelectUsers.map((user, index) => (\n                    <option\n                      key={index}\n                      value={index}\n                    >\n                      {user}\n                    </option>\n                  ))}\n                </select>\n              </label>\n            </header>\n\n            <main className=\"App__main\">\n              <div className=\"App__sidebar\">\n                <PostsList\n                  handleClick={handleClick}\n                  postIsOpened={postIdCheck}\n                  activePostId={selectedPostId}\n                  posts={posts}\n                />\n              </div>\n              <div className=\"App__content\">\n                {postIdCheck && (\n                  <PostDetails\n                    postId={selectedPostId}\n                  />\n                )}\n              </div>\n            </main>\n          </div>\n        )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}