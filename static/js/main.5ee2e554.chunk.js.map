{"version":3,"sources":["store/loading.ts","helpers/api.ts","store/userPosts.tsx","store/userId.tsx","store/postId.tsx","store/postIdCheck.tsx","store/visibleComments.tsx","store/addPost.tsx","store/addComment.tsx","store/inputChange.tsx","store/resetComment.tsx","helpers/comments.tsx","store/index.ts","store/selectors.tsx","components/Start.tsx","components/PostsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","helpers/users.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","POSTS_URL","fetchUserPosts","userId","a","posts","fetch","then","promise","json","result","data","setUserPosts","userPosts","filter","post","id","postId","chooseUserId","choosePostId","setPostIdCheck","postIdCheck","visibleComments","newPost","addComment","newComment","inputChange","commentFields","commentBody","commentEmail","commentName","COMMENTS_URL","getPostComments","comments","comment","removePostComment","commentId","method","addPostComment","headers","body","JSON","stringify","rootReducer","combineReducers","loadingReducer","userPostsReducer","userIdReducer","postIdCheckReducer","postIdReducer","visibleCommentsReducer","newPostReducer","newCommentReducer","inputChangeReducer","commentFieldsReducer","getPosts","state","title","toLowerCase","includes","store","createStore","composeWithDevTools","applyMiddleware","thunk","isLoading","getUserId","getPostId","getpostIdCheck","getvisibleComments","getNewPost","getNewComment","getNameOfComment","getEmailOfComment","getBodyOfComment","Start","dispatch","useDispatch","useSelector","selectedUserId","onClick","paramsOfData","disabled","PostsList","handleClick","postIsOpened","activePostId","wrapper","f","delay","timer","event","sortByInput","currentTarget","value","clearTimeout","window","setTimeout","debounce","className","name","placeholder","onChange","map","key","NewCommentForm","email","onSubmit","preventDefault","commentsUpdate","target","PostDetails","changeVisibleOfComments","length","removeComment","arrayOfSelectUsers","App","selectedPostId","user","index","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ee2e554.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return false;\n\n    case FINISH_LOADING:\n      return true;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { Post } from \"./interfaces\";\n\nconst POSTS_URL = 'https://mate-api.herokuapp.com/posts';\n\nexport const fetchUserPosts = async (userId: number) => {\n  let posts;\n  !userId ? (\n    posts = fetch(`${POSTS_URL}`)\n      .then(promise => promise.json())\n      .then(result => result.data)\n  ) : (\n      posts = fetch(`${POSTS_URL}?userId=${userId}`)\n        .then(promise => promise.json())\n        .then(result => result.data)\n    )\n\n  return posts;\n};\n\nexport const fetchPostDetails = (postId: number) => {\n  const posts = fetch(`${POSTS_URL}/${postId}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return posts;\n};\n\nexport const deletePost = (postId: number) => {\n  const posts = fetch(`${POSTS_URL}`)\n    .then(promise => promise.json())\n    .then(result => result.data.filter((post: Post) => post.id !== postId));\n\n  return posts;\n};\n","import { AnyAction } from 'redux';\nimport { Post } from '../helpers/interfaces';\n\nconst USER_POSTS = 'USER_POSTS';\nconst REMOVE_POST = 'REMOVE_POST';\n\nexport const setUserPosts = (userPosts: Post[]) => ({ type: USER_POSTS, userPosts });\nexport const removePost = (postId: number) => ({ type: REMOVE_POST, postId});\n\nconst reducer = (userPosts = [], action: AnyAction) => {\n  switch (action.type) {\n    case USER_POSTS:\n      return action.userPosts;\n    case REMOVE_POST:\n      return userPosts.filter((post: any) => post.id !== action.postId);\n\n    default:\n      return userPosts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst CHOOSE_USER_ID = 'CHOOSE_USER_ID';\n\nexport const chooseUserId = (userId: number) => ({ type: CHOOSE_USER_ID, userId});\n\nconst reducer = (userId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case CHOOSE_USER_ID:\n      return action.userId;\n\n    default:\n      return userId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst CHOOSE_POST_ID = 'CHOOSE_POST_ID';\n\nexport const choosePostId = (postId: number) => ({ type: CHOOSE_POST_ID, postId});\n\nconst reducer = (postId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case CHOOSE_POST_ID:\n      return action.postId;\n\n    default:\n      return postId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst POST_ID_CHECK = 'POST_ID_CHECK';\n\nexport const setPostIdCheck = (postIdCheck: boolean) => ({ type: POST_ID_CHECK, postIdCheck });\n\nconst reducer = (postIdCheck = false, action: AnyAction) => {\n  switch (action.type) {\n    case POST_ID_CHECK:\n      return action.postIdCheck;\n\n    default:\n      return postIdCheck;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst VISIBLE_COMMENTS = 'VISIBLE_COMMENTS';\n\nexport const changeVisibleOfComments = (visibleComments: boolean) => ({ type: VISIBLE_COMMENTS, visibleComments});\n\nconst reducer = (visibleComments = true, action: AnyAction) => {\n  switch (action.type) {\n    case VISIBLE_COMMENTS:\n      return action.visibleComments;\n\n    default:\n      return visibleComments;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { Post } from '../helpers/interfaces';\n\nconst ADD_POST = 'ADD_POST';\n\nexport const addPost = (newPost: Post) => ({ type: ADD_POST, newPost});\n\nconst reducer = (newPost = null, action: AnyAction) => {\n  switch (action.type) {\n    case ADD_POST:\n      return action.newPost;\n\n    default:\n      return newPost;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst ADD_COMMENT = 'ADD_COMMENT';\n\nexport const addComment = (newComment: {}) => ({ type: ADD_COMMENT, newComment});\n\nconst reducer = (newComment = {}, action: AnyAction) => {\n  switch (action.type) {\n    case ADD_COMMENT:\n      return action.newComment;\n\n    default:\n      return newComment;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst INPUT_CHANGE = 'INPUT_CHANGE';\n\nexport const sortByInput = (inputChange: string) => ({ type: INPUT_CHANGE, inputChange});\n\nconst reducer = (inputChange = '', action: AnyAction) => {\n  switch (action.type) {\n    case INPUT_CHANGE:\n      return action.inputChange;\n\n    default:\n      return inputChange;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst COMMENT_BODY = 'COMMENT_BODY';\nconst COMMENT_EMAIL = 'COMMENT_EMAIL';\nconst COMMENT_NAME = 'COMMENT_NAME';\nconst RESET_COMMENT = 'RESET_COMMENT';\n\nexport const setCommentBody = (commentBody: string) => ({ type: COMMENT_BODY, commentBody });\nexport const setCommentEmail = (commentEmail: string) => ({ type: COMMENT_EMAIL, commentEmail });\nexport const setCommentName = (commentName: string) => ({ type: COMMENT_NAME, commentName });\n\nexport const resetComment = () => ({ type: RESET_COMMENT });\n\nconst reducer = (commentFields = {commentBody: '', commentEmail: '', commentName: ''}, action: AnyAction) => {\n  switch (action.type) {\n    case COMMENT_BODY:\n      return {\n        ...commentFields,\n        commentBody: action.commentBody,\n      };\n    case COMMENT_EMAIL:\n      return {\n        ...commentFields,\n        commentEmail: action.commentEmail,\n      };\n    case COMMENT_NAME:\n      return {\n        ...commentFields,\n        commentName: action.commentName,\n      };\n    case RESET_COMMENT:\n      return {\n        commentBody: '',\n        commentEmail: '',\n        commentName: '',\n      }\n\n    default:\n      return commentFields;\n  }\n};\n\nexport default reducer;\n","import { Comment } from \"./interfaces\";\n\nconst COMMENTS_URL = 'https://mate-api.herokuapp.com/comments';\n\nexport const getPostComments = async(postId: number) => {\n  const comments = await fetch(`${COMMENTS_URL}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments.filter((comment: Comment) => comment.postId === postId);\n};\n\nexport const removePostComment = async (commentId: number) => {\n  const comments = await fetch(`${COMMENTS_URL}/${commentId}`, { method: 'DELETE' })\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments;\n};\n\nexport const addPostComment = async (newComment: object) => {\n  const comments = await fetch(`${COMMENTS_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  })\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments;\n};\n","import { createStore, combineReducers, applyMiddleware, Dispatch } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport { fetchPostDetails, fetchUserPosts } from '../helpers/api';\nimport userPostsReducer, { setUserPosts } from './userPosts';\nimport userIdReducer, { chooseUserId } from './userId';\nimport postIdReducer from './postId';\nimport postIdCheckReducer from './postIdCheck';\nimport visibleCommentsReducer from './visibleComments';\nimport newPostReducer, { addPost } from './addPost';\nimport newCommentReducer, { addComment } from './addComment';\nimport inputChangeReducer from './inputChange';\nimport commentFieldsReducer from './resetComment';\nimport { addPostComment, getPostComments, removePostComment } from '../helpers/comments';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  userPosts: userPostsReducer,\n  userId: userIdReducer,\n  postIdCheck: postIdCheckReducer,\n  postId: postIdReducer,\n  visibleComments: visibleCommentsReducer,\n  newPost: newPostReducer,\n  newComment: newCommentReducer,\n  inputChange: inputChangeReducer,\n  commentFields: commentFieldsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getPosts = (state: RootState) => {\n  if (!state.userId) {\n    return [...state.userPosts].filter(post => post.title !== null && post.title.toLowerCase()\n    .includes(state.inputChange.toLowerCase()))\n  } else {\n    return [...state.userPosts].filter(post => post.userId !== null && post.userId === state.userId && post.title.toLowerCase()\n    .includes(state.inputChange.toLowerCase()));\n  }\n};\n\nexport const fetchPosts = (paramsOfData: number) => {\n  return async(dispatch: Dispatch<any>) => { \n    dispatch(startLoading());\n\n    const posts = await fetchUserPosts(paramsOfData);\n    dispatch(setUserPosts(posts));\n    dispatch(chooseUserId(paramsOfData));\n    dispatch(finishLoading());\n  }\n}\n\nexport const fetchDetailsOfPost = (paramsOfData: number) => {\n  return async(dispatch: Dispatch<any>) => { \n    const posts = await fetchPostDetails(paramsOfData);\n    dispatch(addPost(posts));\n    const comment = await getPostComments(paramsOfData);\n    dispatch(addComment(comment));\n  }\n}\n\nexport const removeComment = (commentId: number, postId: number) => {\n  return async (dispatch: Dispatch<any>) => {\n    removePostComment(commentId)\n    .then(() => getPostComments(postId))\n    .then(result => dispatch(addComment(result)));\n  }\n}\n\nexport const commentsUpdate = (newComment: {}, postId: number) => {\n  return async (dispatch: Dispatch<any>) => {\n    addPostComment(newComment)\n    .then(() => getPostComments(postId))\n    .then(result => dispatch(addComment(result)));\n  }\n}\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { RootState } from \".\";\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getUserId = (state: RootState) => state.userId;\nexport const getPostId = (state: RootState) => state.postId;\nexport const getpostIdCheck = (state: RootState) => state.postIdCheck;\nexport const getvisibleComments = (state: RootState) => state.visibleComments;\nexport const getNewPost = (state: RootState) => state.newPost;\nexport const getNewComment = (state: RootState) => state.newComment;\nexport const getNameOfComment = (state: RootState) => state.commentFields.commentName;\nexport const getEmailOfComment = (state: RootState) => state.commentFields.commentEmail;\nexport const getBodyOfComment = (state: RootState) => state.commentFields.commentBody;\nexport const getInputChange = (state: RootState) => state.inputChange;\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts } from '../store';\nimport { isLoading, getUserId } from '../store/selectors';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const selectedUserId = useSelector(getUserId);\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => dispatch(fetchPosts(selectedUserId))}\n      disabled={loading}\n    >\n      {!loading && 'Start loading Posts'}\n    </button>\n  );\n};\n","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Post } from '../helpers/interfaces';\nimport { sortByInput } from '../store/inputChange';\nimport { removePost } from '../store/userPosts';\n\nimport './PostsList.scss';\n\ntype PostsListProps = {\n  handleClick: Function;\n  postIsOpened: boolean;\n  activePostId: number\n  posts: Post[];\n};\n\nexport const PostsList: React.FC<PostsListProps> = ({\n  posts,\n  handleClick,\n  postIsOpened,\n  activePostId,\n}) => {\n  const dispatch = useDispatch();\n\n  function debounce(f: Function, delay: number) {\n    let timer: number;\n\n    return (event: React.ChangeEvent<HTMLInputElement>) => {\n      const currentTarget = event.currentTarget;\n\n      const action = sortByInput(currentTarget.value);\n      clearTimeout(timer); \n      timer = window.setTimeout( () => {\n        f(action);\n      }, delay)\n    }\n  }\n  \n  let wrapper = debounce(dispatch, 1500);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <div className=\"App__input\">\n        <label className=\"filterByTitle\">\n          <input\n            className=\"filterByTitle\"\n            type=\"text\"\n            name=\"filterTitle\"\n            placeholder=\"put name of todo\"\n            onChange={wrapper}\n          />\n          <span className=\"bar\" />\n        </label>\n\n      </div>\n    <div className=\"App__PostList\">\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]`}</b>\n              {post.title}\n            </div>\n            <button\n              className=\"beautiful.button\"\n                type=\"button\"\n                onClick={() => dispatch(removePost(post.id))}\n              >\n                Remove\n              </button>\n            {postIsOpened && post.id === activePostId\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleClick(post.id, 'Close')}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleClick(post.id, 'Open')}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n  )\n}\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { commentsUpdate } from '../store';\nimport { resetComment, setCommentBody, setCommentEmail, setCommentName } from '../store/resetComment';\nimport { getBodyOfComment, getEmailOfComment, getNameOfComment } from '../store/selectors';\n\nimport './NewCommentForm.scss';\n\ntype NewCommentFormProps = {\n  postId: number\n};\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = ({ postId }) => {\n  const dispatch = useDispatch();\n  const name = useSelector(getNameOfComment);\n  const email = useSelector(getEmailOfComment);\n  const body = useSelector(getBodyOfComment);\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n\n    dispatch(commentsUpdate({\n      postId,\n      name,\n      email,\n      body,\n    }, postId));\n\n    dispatch(resetComment());\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => dispatch(setCommentName(event.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => dispatch(setCommentEmail(event.target.value))}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => dispatch(setCommentBody(event.target.value))}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Comment } from '../helpers/interfaces';\nimport { removeComment } from '../store';\nimport { getvisibleComments, getNewPost, getNewComment } from '../store/selectors';\nimport { changeVisibleOfComments } from '../store/visibleComments';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport './PostDetails.scss';\n\ntype PostDetailsProps = {\n  postId: number\n};\n\nexport const PostDetails: React.FC<PostDetailsProps> = ({ postId }) => {\n  const dispatch = useDispatch();\n\n  const visibleComments = useSelector(getvisibleComments);\n  const post = useSelector(getNewPost);\n  const comments = useSelector(getNewComment);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post !== null && post.title}</p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => dispatch(changeVisibleOfComments(!visibleComments))}\n        >\n          {visibleComments ? `Hide` : 'Show'}\n          {` ${comments.length} comments`}\n        </button>\n\n        {visibleComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.length > 0 && comments.map((comment: Comment) => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => dispatch(removeComment(comment.id, postId))}\n                >\n                  X\n                </button>\n                <p>{comment.name}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","export const arrayOfSelectUsers = [\n  'All users',\n  'Leanne Graham',\n  'Ervin Howell',\n  'Clementine Bauch',\n  'Patricia Lebsack',\n  'Chelsey Dietrich',\n  'Mrs. Dennis Schulist',\n  'Kurtis Weissnat',\n  'Nicholas Runolfsdottir V',\n  'Glenna Reichert',\n]\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Start } from './components/Start';\nimport { PostsList } from './components/PostsList';\nimport { choosePostId } from './store/postId';\nimport { setPostIdCheck} from './store/postIdCheck';\nimport { PostDetails } from './components/PostDetails';\nimport { chooseUserId } from './store/userId';\nimport { arrayOfSelectUsers } from './helpers/users';\nimport { getPosts, fetchDetailsOfPost } from './store';\nimport { isLoading, getPostId, getpostIdCheck } from './store/selectors';\n\nimport './App.scss';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const posts = useSelector(getPosts);\n  const selectedPostId = useSelector(getPostId);\n  const postIdCheck = useSelector(getpostIdCheck);\n\n  const handleClick = (postId: number, action: any) => {\n    dispatch(fetchDetailsOfPost(postId));\n\n    switch (action) {\n      case 'Open':\n        dispatch(choosePostId(postId));\n        dispatch(setPostIdCheck(true));\n        break;\n      case 'Close':\n        dispatch(choosePostId(0));\n        dispatch(setPostIdCheck(false));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      {!loading\n        ? <Start />\n        : (\n          <div className=\"App__loadPosts\">\n            <header className=\"App__header\">\n              <label>\n                Select a user: &nbsp;\n                <select\n                  className=\"App__user-selector\"\n                  onChange={event => dispatch(chooseUserId(+event.target.value))}\n                >\n                  {arrayOfSelectUsers.map((user, index) => (\n                    <option\n                      key={user}\n                      value={index}\n                    >\n                      {user}\n                    </option>\n                  ))}\n                </select>\n              </label>\n            </header>\n\n            <main className=\"App__main\">\n              <div className=\"App__sidebar\">\n                <PostsList\n                  handleClick={handleClick}\n                  postIsOpened={postIdCheck}\n                  activePostId={selectedPostId}\n                  posts={posts}\n                />\n              </div>\n              <div className=\"App__content\">\n                {postIdCheck && (\n                  <PostDetails\n                    postId={selectedPostId}\n                  />\n                )}\n              </div>\n            </main>\n          </div>\n        )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}