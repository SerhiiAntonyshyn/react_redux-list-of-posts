{"version":3,"sources":["store/loading.ts","helpers/api.ts","store/userPosts.tsx","store/userId.tsx","store/postId.tsx","store/postIdCheck.tsx","store/visibleComments.tsx","store/addPost.tsx","store/addComment.tsx","store/inputChange.tsx","store/resetComment.tsx","helpers/comments.tsx","store/disabledButton.tsx","store/index.ts","store/selectors.tsx","components/Loader.tsx","components/Start.tsx","helpers/users.tsx","components/PostsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","POSTS_URL","fetchUserPosts","userId","a","posts","fetch","then","promise","json","result","data","fetchPostDetails","postId","setUserPosts","userPosts","filter","post","id","chooseUserId","choosePostId","setPostIdCheck","postIdCheck","visibleComments","newPost","addComment","newComment","inputChange","commentFields","commentBody","commentEmail","commentName","COMMENTS_URL","getPostComments","comments","comment","removePostComment","commentId","method","addPostComment","headers","body","JSON","stringify","isButtonDisabled","rootReducer","combineReducers","loadingReducer","userPostsReducer","userIdReducer","postIdCheckReducer","postIdReducer","visibleCommentsReducer","newPostReducer","newCommentReducer","inputChangeReducer","commentFieldsReducer","isButtonDisabledReducer","getPosts","state","title","toLowerCase","includes","store","createStore","composeWithDevTools","applyMiddleware","thunk","isLoading","isDisabled","getUserId","getPostId","getpostIdCheck","getvisibleComments","getNewPost","getNewComment","getNameOfComment","getEmailOfComment","getBodyOfComment","Loader","className","Start","dispatch","useDispatch","useSelector","selectedUserId","onClick","paramsOfData","disabled","arrayOfSelectUsers","PostsList","handleClick","postIsOpened","activePostId","wrapper","f","delay","timer","event","sortByInput","currentTarget","value","clearTimeout","window","setTimeout","debounce","required","name","onChange","length","map","key","NewCommentForm","email","onSubmit","preventDefault","commentsUpdate","target","PostDetails","undefined","changeVisibleOfComments","removeComment","App","selectedPostId","user","index","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.730d6ec4.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\n\nconst reducer = (loading = \"\", action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return \"Start Loading\";\n\n    case FINISH_LOADING:\n      return \"Finish Loading\";\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { Post } from \"./interfaces\";\n\nconst POSTS_URL = 'https://mate-api.herokuapp.com/posts';\n\nexport const fetchUserPosts = async (userId: number) => {\n  let posts;\n  !userId ? (\n    posts = fetch(`${POSTS_URL}`)\n      .then(promise => promise.json())\n      .then(result => result.data)\n  ) : (\n      posts = fetch(`${POSTS_URL}?userId=${userId}`)\n        .then(promise => promise.json())\n        .then(result => result.data)\n    )\n\n  return posts;\n};\n\nexport const fetchPostDetails = async (postId: number) => {\n  const posts = fetch(`${POSTS_URL}/${postId}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return posts;\n};\n\nexport const deletePost = (postId: number) => {\n  const posts = fetch(`${POSTS_URL}`)\n    .then(promise => promise.json())\n    .then(result => result.data.filter((post: Post) => post.id !== postId));\n\n  return posts;\n};\n","import { AnyAction } from 'redux';\nimport { Post } from '../helpers/interfaces';\n\nconst USER_POSTS = 'USER_POSTS';\nconst REMOVE_POST = 'REMOVE_POST';\n\nexport const setUserPosts = (userPosts: Post[]) => ({ type: USER_POSTS, userPosts });\nexport const removePost = (postId: number) => ({ type: REMOVE_POST, postId});\n\nconst reducer = (userPosts = [], action: AnyAction) => {\n  switch (action.type) {\n    case USER_POSTS:\n      return action.userPosts;\n    case REMOVE_POST:\n      return userPosts.filter((post: any) => post.id !== action.postId);\n\n    default:\n      return userPosts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst CHOOSE_USER_ID = 'CHOOSE_USER_ID';\n\nexport const chooseUserId = (userId: number) => ({ type: CHOOSE_USER_ID, userId});\n\nconst reducer = (userId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case CHOOSE_USER_ID:\n      return action.userId;\n\n    default:\n      return userId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst CHOOSE_POST_ID = 'CHOOSE_POST_ID';\n\nexport const choosePostId = (postId: number) => ({ type: CHOOSE_POST_ID, postId});\n\nconst reducer = (postId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case CHOOSE_POST_ID:\n      return action.postId;\n\n    default:\n      return postId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst POST_ID_CHECK = 'POST_ID_CHECK';\n\nexport const setPostIdCheck = (postIdCheck: boolean) => ({ type: POST_ID_CHECK, postIdCheck });\n\nconst reducer = (postIdCheck = false, action: AnyAction) => {\n  switch (action.type) {\n    case POST_ID_CHECK:\n      return action.postIdCheck;\n\n    default:\n      return postIdCheck;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst VISIBLE_COMMENTS = 'VISIBLE_COMMENTS';\n\nexport const changeVisibleOfComments = (visibleComments: boolean) => ({ type: VISIBLE_COMMENTS, visibleComments});\n\nconst reducer = (visibleComments = true, action: AnyAction) => {\n  switch (action.type) {\n    case VISIBLE_COMMENTS:\n      return action.visibleComments;\n\n    default:\n      return visibleComments;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport { Post } from '../helpers/interfaces';\n\nconst ADD_POST = 'ADD_POST';\n\nexport const addPost = (newPost: Post) => ({ type: ADD_POST, newPost});\n\nconst reducer = (newPost = null, action: AnyAction) => {\n  switch (action.type) {\n    case ADD_POST:\n      return action.newPost;\n\n    default:\n      return newPost;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst ADD_COMMENT = 'ADD_COMMENT';\n\nexport const addComment = (newComment: {}) => ({ type: ADD_COMMENT, newComment});\n\nconst reducer = (newComment = {}, action: AnyAction) => {\n  switch (action.type) {\n    case ADD_COMMENT:\n      return action.newComment;\n\n    default:\n      return newComment;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst INPUT_CHANGE = 'INPUT_CHANGE';\n\nexport const sortByInput = (inputChange: string) => ({ type: INPUT_CHANGE, inputChange});\n\nconst reducer = (inputChange = '', action: AnyAction) => {\n  switch (action.type) {\n    case INPUT_CHANGE:\n      return action.inputChange;\n\n    default:\n      return inputChange;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst COMMENT_BODY = 'COMMENT_BODY';\nconst COMMENT_EMAIL = 'COMMENT_EMAIL';\nconst COMMENT_NAME = 'COMMENT_NAME';\nconst RESET_COMMENT = 'RESET_COMMENT';\n\nexport const setCommentBody = (commentBody: string) => ({ type: COMMENT_BODY, commentBody });\nexport const setCommentEmail = (commentEmail: string) => ({ type: COMMENT_EMAIL, commentEmail });\nexport const setCommentName = (commentName: string) => ({ type: COMMENT_NAME, commentName });\n\nexport const resetComment = () => ({ type: RESET_COMMENT });\n\nconst reducer = (commentFields = {commentBody: '', commentEmail: '', commentName: ''}, action: AnyAction) => {\n  switch (action.type) {\n    case COMMENT_BODY:\n      return {\n        ...commentFields,\n        commentBody: action.commentBody,\n      };\n    case COMMENT_EMAIL:\n      return {\n        ...commentFields,\n        commentEmail: action.commentEmail,\n      };\n    case COMMENT_NAME:\n      return {\n        ...commentFields,\n        commentName: action.commentName,\n      };\n    case RESET_COMMENT:\n      return {\n        commentBody: '',\n        commentEmail: '',\n        commentName: '',\n      }\n\n    default:\n      return commentFields;\n  }\n};\n\nexport default reducer;\n","import { Comment } from \"./interfaces\";\n\nconst COMMENTS_URL = 'https://mate-api.herokuapp.com/comments';\n\nexport const getPostComments = async(postId: number) => {\n  const comments = await fetch(`${COMMENTS_URL}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments.filter((comment: Comment) => comment.postId === postId);\n};\n\nexport const removePostComment = async (commentId: number) => {\n  const comments = await fetch(`${COMMENTS_URL}/${commentId}`, { method: 'DELETE' })\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments;\n};\n\nexport const addPostComment = async (newComment: object) => {\n  const comments = await fetch(`${COMMENTS_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  })\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments;\n};\n","import { AnyAction } from 'redux';\n\nconst DISABLE_BUTTON = 'DISABLED_BUTTON';\nconst ACTIVE_BUTTON = 'ACTIVE_BUTTON';\n\n\nexport const disabledButton = () => ({ type: DISABLE_BUTTON });\nexport const activeButton = () => ({ type: ACTIVE_BUTTON });\n\n\nconst reducer = (isButtonDisabled = false, action: AnyAction) => {\n  switch (action.type) {\n    case DISABLE_BUTTON:\n      return true;\n\n    case ACTIVE_BUTTON:\n      return false;\n\n    default:\n      return isButtonDisabled;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware, Dispatch } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport { fetchPostDetails, fetchUserPosts } from '../helpers/api';\nimport userPostsReducer, { setUserPosts } from './userPosts';\nimport userIdReducer, { chooseUserId } from './userId';\nimport postIdReducer from './postId';\nimport postIdCheckReducer from './postIdCheck';\nimport visibleCommentsReducer from './visibleComments';\nimport newPostReducer, { addPost } from './addPost';\nimport newCommentReducer, { addComment } from './addComment';\nimport inputChangeReducer from './inputChange';\nimport commentFieldsReducer from './resetComment';\nimport { addPostComment, getPostComments, removePostComment } from '../helpers/comments';\nimport isButtonDisabledReducer, { activeButton, disabledButton } from './disabledButton';\n\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  userPosts: userPostsReducer,\n  userId: userIdReducer,\n  postIdCheck: postIdCheckReducer,\n  postId: postIdReducer,\n  visibleComments: visibleCommentsReducer,\n  newPost: newPostReducer,\n  newComment: newCommentReducer,\n  inputChange: inputChangeReducer,\n  commentFields: commentFieldsReducer,\n  isButtonDisabled: isButtonDisabledReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getPosts = (state: RootState) => {\n\n  if (!state.userId) {\n    return [...state.userPosts].filter(post => post.title !== null && post.title.toLowerCase()\n    .includes(state.inputChange.toLowerCase()))\n  } else {\n    return [...state.userPosts].filter(post => post.userId !== null && post.userId === state.userId && post.title.toLowerCase()\n    .includes(state.inputChange.toLowerCase()));\n  }\n};\n\nexport const fetchPosts = (paramsOfData: number) => {\n  return async(dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n    const posts = await fetchUserPosts(paramsOfData);\n    dispatch(setUserPosts(posts));\n    dispatch(chooseUserId(paramsOfData));\n    dispatch(finishLoading());\n  }\n}\n\nexport const fetchDetailsOfPost = (paramsOfData: number) => {\n  return async(dispatch: Dispatch<any>) => {\n    const posts = await fetchPostDetails(paramsOfData);\n    dispatch(addPost(posts));\n    const comment = await getPostComments(paramsOfData);\n    dispatch(addComment(comment));\n\n  }\n}\n\nexport const removeComment = (commentId: number, postId: number) => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(disabledButton());\n    removePostComment(commentId)\n    .then(() => getPostComments(postId))\n    .then(result => dispatch(addComment(result)));\n    dispatch(activeButton());\n\n\n  }\n}\n\nexport const commentsUpdate = (newComment: {}, postId: number) => {\n  return async (dispatch: Dispatch<any>) => {\n    addPostComment(newComment)\n    .then(() => getPostComments(postId))\n    .then(result => dispatch(addComment(result)));\n\n  }\n}\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { RootState } from \".\";\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const isDisabled = (state: RootState) => state.isButtonDisabled;\nexport const getUserId = (state: RootState) => state.userId;\nexport const getPostId = (state: RootState) => state.postId;\nexport const getpostIdCheck = (state: RootState) => state.postIdCheck;\nexport const getvisibleComments = (state: RootState) => state.visibleComments;\nexport const getNewPost = (state: RootState) => state.newPost;\nexport const getNewComment = (state: RootState) => state.newComment;\nexport const getNameOfComment = (state: RootState) => state.commentFields.commentName;\nexport const getEmailOfComment = (state: RootState) => state.commentFields.commentEmail;\nexport const getBodyOfComment = (state: RootState) => state.commentFields.commentBody;\nexport const getInputChange = (state: RootState) => state.inputChange;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts } from '../store';\nimport { isLoading, getUserId } from '../store/selectors';\nimport { Loader } from './Loader';\n\nimport './Start.scss';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const selectedUserId = useSelector(getUserId);\n\n  return (\n    <div className=\"Start\">\n      {loading !== \"Start Loading\" ? (\n        <button\n          type=\"button\"\n          className=\"Start__header_button\"\n          onClick={() => dispatch(fetchPosts(selectedUserId))}\n          disabled={!!loading}\n        >\n          {!loading && 'Click here to download posts!'}\n        </button>\n      ) : (\n          <Loader />\n        )\n      }\n    </div>\n  );\n};\n","export const arrayOfSelectUsers = [\n  'All users',\n  'Leanne Graham',\n  'Ervin Howell',\n  'Clementine Bauch',\n  'Patricia Lebsack',\n  'Chelsey Dietrich',\n  'Mrs. Dennis Schulist',\n  'Kurtis Weissnat',\n  'Nicholas Runolfsdottir V',\n  'Glenna Reichert',\n]\n","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Post } from '../helpers/interfaces';\nimport { arrayOfSelectUsers } from '../helpers/users';\nimport { sortByInput } from '../store/inputChange';\nimport { removePost } from '../store/userPosts';\n\nimport './PostsList.scss';\n\ntype PostsListProps = {\n  handleClick: Function;\n  postIsOpened: boolean;\n  activePostId: number\n  posts: Post[];\n};\n\nexport const PostsList: React.FC<PostsListProps> = ({\n  posts,\n  handleClick,\n  postIsOpened,\n  activePostId,\n}) => {\n  const dispatch = useDispatch();\n\n  function debounce(f: Function, delay: number) {\n    let timer: number;\n\n    return (event: React.ChangeEvent<HTMLInputElement>) => {\n      const currentTarget = event.currentTarget;\n\n      const action = sortByInput(currentTarget.value);\n      clearTimeout(timer); \n      timer = window.setTimeout( () => {\n        f(action);\n      }, delay)\n    }\n  }\n  \n  let wrapper = debounce(dispatch, 1500);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <div className=\"PostsList__input\">\n        <input\n          type=\"text\"\n          required\n          name=\"filterTitle\"\n          className=\"PostsList__input-filter\"\n          onChange={wrapper}\n        />\n        <span className=\"PostsList__bar\"></span>\n        <label className=\"PostsList__label\">Put the name of post</label>\n      </div>\n      <div className=\"App__PostList\">\n        {posts.length !== 0 ? (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>{arrayOfSelectUsers[post.userId]}</b>\n                  <p className=\"PostsLists__item_title\">\n                    {post.title}\n                  </p>\n                </div>\n                <div className=\"PostsList__list_button\">\n                  <button\n                    className=\"PostsList__button\"\n                    type=\"button\"\n                    onClick={() => dispatch(removePost(post.id))}\n                  >\n                    Remove\n              </button>\n                  {postIsOpened && post.id === activePostId\n                    ? (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button\"\n                        onClick={() => handleClick(post.id, 'Close')}\n                      >\n                        Close\n                      </button>\n                    )\n                    : (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button\"\n                        onClick={() => handleClick(post.id, 'Open')}\n                      >\n                        Open\n                      </button>\n                    )}\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n            <div className=\"PostsList__emptyList\">No posts found, please change the search word</div>\n          )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { commentsUpdate } from '../store';\nimport { resetComment, setCommentBody, setCommentEmail, setCommentName } from '../store/resetComment';\nimport { getBodyOfComment, getEmailOfComment, getNameOfComment } from '../store/selectors';\n\nimport './NewCommentForm.scss';\n\ntype NewCommentFormProps = {\n  postId: number\n};\n\nexport const NewCommentForm: React.FC<NewCommentFormProps> = ({ postId }) => {\n  const dispatch = useDispatch();\n  const name = useSelector(getNameOfComment);\n  const email = useSelector(getEmailOfComment);\n  const body = useSelector(getBodyOfComment);\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n\n    dispatch(commentsUpdate({\n      postId,\n      name,\n      email,\n      body,\n    }, postId));\n\n    dispatch(resetComment());\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"NewCommentForm__form-field\">\n        <input\n          type=\"text\"\n          required\n          name=\"name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => dispatch(setCommentName(event.target.value))}\n        />\n        <span className=\"NewCommentForm__bar\"></span>\n        <label className=\"NewCommentForm__label\">Name</label>\n      </div>\n\n      <div className=\"NewCommentForm__form-field\">\n        <input\n          type=\"text\"\n          required\n          name=\"email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => dispatch(setCommentEmail(event.target.value))}\n        />\n        <span className=\"NewCommentForm__bar\"></span>\n        <label className=\"NewCommentForm__label\">Email</label>\n      </div>\n\n      <div className=\"NewCommentForm__form-field\">\n        <input\n          type=\"text\"\n          required\n          name=\"body\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => dispatch(setCommentBody(event.target.value))}\n        />\n        <span className=\"NewCommentForm__bar\"></span>\n        <label className=\"NewCommentForm__label\">Text</label>\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Comment } from '../helpers/interfaces';\nimport { removeComment } from '../store';\nimport { getvisibleComments, getNewPost, getNewComment, isDisabled } from '../store/selectors';\nimport { changeVisibleOfComments } from '../store/visibleComments';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport './PostDetails.scss';\n\ntype PostDetailsProps = {\n  postId: number\n};\n\nexport const PostDetails: React.FC<PostDetailsProps> = ({ postId }) => {\n  const dispatch = useDispatch();\n\n  const visibleComments = useSelector(getvisibleComments);\n  const post = useSelector(getNewPost);\n  const comments = useSelector(getNewComment);\n  const isButtonDisabled = useSelector(isDisabled);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post !== null && post.title}</p>\n      </section>\n      {comments.length === undefined\n        ? <Loader />\n        : (\n          comments.length > 0 &&\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"PostDetails__button\"\n              onClick={() => dispatch(changeVisibleOfComments(!visibleComments))}\n            >\n              {visibleComments ? `Hide` : 'Show'}\n              {` ${comments.length} comments`}\n            </button>\n\n            {visibleComments && (\n              <ul className=\"PostDetails__list\">\n                {comments.length > 0 && comments.map((comment: Comment) => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__button\"\n                      onClick={() => dispatch(removeComment(comment.id, postId))}\n                      disabled={isButtonDisabled}\n                    >\n                      X\n                </button>\n                    <p>{comment.name}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Start } from './components/Start';\nimport { PostsList } from './components/PostsList';\nimport { choosePostId } from './store/postId';\nimport { setPostIdCheck} from './store/postIdCheck';\nimport { PostDetails } from './components/PostDetails';\nimport { chooseUserId } from './store/userId';\nimport { arrayOfSelectUsers } from './helpers/users';\nimport { getPosts, fetchDetailsOfPost } from './store';\nimport { getPostId, getpostIdCheck, isLoading } from './store/selectors';\n\nimport './App.scss';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const selectedPostId = useSelector(getPostId);\n  const postIdCheck = useSelector(getpostIdCheck);\n  const loading = useSelector(isLoading);\n\n\n  const handleClick = (postId: number, action: any) => {\n    dispatch(fetchDetailsOfPost(postId));\n\n    switch (action) {\n      case 'Open':\n        dispatch(choosePostId(postId));\n        dispatch(setPostIdCheck(true));\n        break;\n      case 'Close':\n        dispatch(choosePostId(0));\n        dispatch(setPostIdCheck(false));\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__headline\">\n        Redux list of posts\n      </h1>\n      {loading !== \"Finish Loading\" ? (\n        <Start />\n      ) : (\n          <div className=\"App__loadPosts\">\n            <header className=\"App__header\">\n              <label>\n                Select a user: &nbsp;\n                <select\n                  className=\"App__user-selector\"\n                  onChange={event => dispatch(chooseUserId(+event.target.value))}\n                >\n                  {arrayOfSelectUsers.map((user, index) => (\n                    <option\n                      key={user}\n                      value={index}\n                    >\n                      {user}\n                    </option>\n                  ))}\n                </select>\n              </label>\n            </header>\n\n            <main className=\"App__main\">\n              <div className=\"App__sidebar\">\n                <PostsList\n                  handleClick={handleClick}\n                  postIsOpened={postIdCheck}\n                  activePostId={selectedPostId}\n                  posts={posts}\n                />\n              </div>\n              <div className=\"App__content\">\n                {postIdCheck ? (\n                  <PostDetails\n                    postId={selectedPostId}\n                  />\n                ) : 'No post details selected'}\n              </div>\n            </main>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}